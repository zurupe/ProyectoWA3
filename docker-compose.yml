version: '3.8'
services:
  # Base de datos PostgreSQL para cliente-service y auth-service
  postgres-db:
    image: postgres:15
    container_name: postgres-cliente
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: cliente_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Base de datos MySQL para pedido-service
  mysql-db:
    image: mysql:8.0
    container_name: mysql-pedido
    environment:
      MYSQL_DATABASE: pedido_db
      MYSQL_USER: pedido_user
      MYSQL_PASSWORD: pedido_pass
      MYSQL_ROOT_PASSWORD: root_pass
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Redis para tracking-service
  redis-db:
    image: redis:7-alpine
    container_name: redis-tracking
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Microservicio de autenticaci√≥n
  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-network
    depends_on:
      postgres-db:
        condition: service_healthy

  # Microservicio de clientes
  cliente-service:
    build: ./cliente-service
    container_name: cliente-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://postgres-db:5432/cliente_db
      - DATABASE_USERNAME=cliente_user
      - DATABASE_PASSWORD=cliente_pass
      - AUTH_SERVICE_URL=http://auth-service:8081
    networks:
      - microservices-network
    depends_on:
      postgres-db:
        condition: service_healthy
      auth-service:
        condition: service_started

  # Microservicio de pedidos
  pedido-service:
    build: ./pedido-service
    container_name: pedido-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:mysql://mysql-db:3306/pedido_db
      - DATABASE_USERNAME=pedido_user
      - DATABASE_PASSWORD=pedido_pass
      - AUTH_SERVICE_URL=http://auth-service:8081
      - TRACKING_SERVICE_URL=http://tracking-service:8084
    networks:
      - microservices-network
    depends_on:
      mysql-db:
        condition: service_healthy
      auth-service:
        condition: service_started
      tracking-service:
        condition: service_started

  # Microservicio de tracking
  tracking-service:
    build: ./tracking-service
    container_name: tracking-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - REDIS_URL=redis://redis-db:6379
      - AUTH_SERVICE_URL=http://auth-service:8081
    networks:
      - microservices-network
    depends_on:
      redis-db:
        condition: service_healthy
      auth-service:
        condition: service_started

  # Frontend Angular
  frontend:
    build: ./frontend
    container_name: frontend-angular
    ports:
      - "4200:4200"
    environment:
      - AUTH_SERVICE_URL=http://localhost:8081
      - CLIENTE_SERVICE_URL=http://localhost:8082
      - PEDIDO_SERVICE_URL=http://localhost:8083
      - TRACKING_SERVICE_URL=http://localhost:8084
    networks:
      - microservices-network
    depends_on:
      - auth-service
      - cliente-service
      - pedido-service
      - tracking-service

volumes:
  postgres_data:
  mysql_data:
  redis_data:

networks:
  microservices-network:
    driver: bridge
