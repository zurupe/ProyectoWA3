{
	"info": {
		"name": "Auth Service - Sistema de Seguimiento de Pedidos",
		"description": "Colecci√≥n completa para el microservicio de autenticaci√≥n OAuth2.\n\n**Endpoints incluidos:**\n- Health checks p√∫blicos\n- Registro de usuarios\n- Login/Autenticaci√≥n\n- Gesti√≥n de usuarios\n- Validaciones\n- OAuth2 endpoints\n\n**Variables necesarias:**\n- `base_url`: http://localhost:8081\n- `access_token`: Se establece autom√°ticamente tras login exitoso",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_postman_id": "auth-service-collection-2024"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "üîç Health & Info",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/public/health",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "public", "health"]
						},
						"description": "Endpoint p√∫blico para verificar el estado del servicio de autenticaci√≥n."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Service is UP', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('UP');",
									"    pm.expect(jsonData.service).to.eql('auth-service');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Service Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/public/info",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "public", "info"]
						},
						"description": "Informaci√≥n del servidor OAuth2 y endpoints disponibles."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Contains OAuth2 endpoints', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.endpoints).to.have.property('authorization');",
									"    pm.expect(jsonData.endpoints).to.have.property('token');",
									"    pm.expect(jsonData.endpoints).to.have.property('jwks');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"password123\",\n    \"email\": \"test@example.com\",\n    \"nombre\": \"Test\",\n    \"apellido\": \"User\",\n    \"role\": \"ROLE_CLIENTE\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register"]
						},
						"description": "Registro de nuevos usuarios en el sistema."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Registration successful', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains user data', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						},
						"description": "Autenticaci√≥n de usuario y obtenci√≥n de JWT token."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains access token', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    ",
									"    // Guardar token para requests posteriores",
									"    pm.collectionVariables.set('access_token', jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Login Admin",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						},
						"description": "Login con usuario administrador (debe existir en data.sql)."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin login successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Admin token received', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    ",
									"    // Guardar token de admin",
									"    pm.collectionVariables.set('access_token', jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "üë§ User Management",
			"item": [
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/me",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "me"]
						},
						"description": "Obtener informaci√≥n del usuario autenticado actual."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User data is present', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('role');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "List All Users (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/usuarios",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "usuarios"]
						},
						"description": "Listar todos los usuarios (requiere rol ADMIN)."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 403', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Users list is array', function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.be.an('array');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/usuarios/1",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "usuarios", "1"]
						},
						"description": "Obtener usuario espec√≠fico por ID (solo admin o propio usuario)."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200, 403, or 404', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 403, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('User data returned', function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData.id).to.eql(1);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "‚úÖ Validations",
			"item": [
				{
					"name": "Check Username Availability",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/check-username/newuser",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "check-username", "newuser"]
						},
						"description": "Verificar si un username est√° disponible."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains availability info', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('field');",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.field).to.eql('username');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Check Email Availability",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/check-email/new@example.com",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "check-email", "new@example.com"]
						},
						"description": "Verificar si un email est√° disponible."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains email availability', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('field');",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.field).to.eql('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "üîë OAuth2 Endpoints",
			"item": [
				{
					"name": "Get JWKS",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/oauth2/jwks",
							"host": ["{{base_url}}"],
							"path": ["oauth2", "jwks"]
						},
						"description": "Obtener las claves p√∫blicas JWK para validar tokens JWT."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('JWKS contains keys', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('keys');",
									"    pm.expect(jsonData.keys).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "OAuth2 Token Exchange",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"value": "Basic ZnJvbnRlbmQtY2xpZW50OmZyb250ZW5kLXNlY3JldA=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								},
								{
									"key": "scope",
									"value": "read write"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/oauth2/token",
							"host": ["{{base_url}}"],
							"path": ["oauth2", "token"]
						},
						"description": "Intercambio de token OAuth2 usando client_credentials grant."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Token exchange successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Access token received', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.expect(jsonData).to.have.property('token_type');",
									"    pm.expect(jsonData.token_type).to.eql('Bearer');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Well-Known OpenID Configuration",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/.well-known/openid_configuration",
							"host": ["{{base_url}}"],
							"path": [".well-known", "openid_configuration"]
						},
						"description": "Configuraci√≥n OpenID Connect discovery endpoint."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('OpenID configuration present', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('issuer');",
									"    pm.expect(jsonData).to.have.property('authorization_endpoint');",
									"    pm.expect(jsonData).to.have.property('token_endpoint');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "üß™ Error Cases",
			"item": [
				{
					"name": "Login with Invalid Credentials",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"invalid\",\n    \"password\": \"wrong\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						},
						"description": "Probar login con credenciales inv√°lidas."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login fails with 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Error message present', function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('Credenciales inv√°lidas');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Access Protected Endpoint Without Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/me",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "me"]
						},
						"description": "Acceso a endpoint protegido sin token de autorizaci√≥n."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Access denied without token', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Register with Duplicate Username",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password123\",\n    \"email\": \"duplicate@example.com\",\n    \"nombre\": \"Duplicate\",\n    \"apellido\": \"User\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register"]
						},
						"description": "Intentar registrar usuario con username duplicado."
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Registration fails for duplicate username', function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script global",
					"console.log('Ejecutando request en Auth Service...');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Test script global",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});"
				]
			}
		}
	]
}